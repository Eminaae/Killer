import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


public class VarCount {
	private String path;
	private static String DECLARATION_REGEX = "(?:(?:private|protected|public)\\s+)?(?:static\\s+)?(?:final\\s+)?([^-+\\s]+)\\s+(?:[^-+\\s]+)\\s*(?:;|=*)";
	private static final Pattern DECLARATION_PATTERN = Pattern.compile(DECLARATION_REGEX);
	public VarCount(String path){
		this.path = path;
	}
	
	public Map<String, Integer> count() throws IOException {
	Map<String, Integer> counts = new HashMap<String, Integer>();
	try(BufferedReader br = new BufferedReader(new FileReader(path))){
		String line  = null;
		while((line = br.readLine())!= null){
			line = line.trim();
			if(line.length() >3){
				Matcher m = DECLARATION_PATTERN.matcher(line);
				if(m.matches()){
					String type = m.group(1);
					Integer typeCount = counts.get(type);
					if(typeCount == null){
						typeCount = 1;
					}
					
				}
			}
		}
		
		return counts;
		
	}
	}

	public static void main(String[] args) {
		
	}

}
